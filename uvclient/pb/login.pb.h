// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: login.proto

#ifndef PROTOBUF_INCLUDED_login_2eproto
#define PROTOBUF_INCLUDED_login_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_login_2eproto 

namespace protobuf_login_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_login_2eproto
namespace im_login {
class AESData;
class AESDataDefaultTypeInternal;
extern AESDataDefaultTypeInternal _AESData_default_instance_;
class Login;
class LoginDefaultTypeInternal;
extern LoginDefaultTypeInternal _Login_default_instance_;
class LoginRsp;
class LoginRspDefaultTypeInternal;
extern LoginRspDefaultTypeInternal _LoginRsp_default_instance_;
class LogoutRsp;
class LogoutRspDefaultTypeInternal;
extern LogoutRspDefaultTypeInternal _LogoutRsp_default_instance_;
class RsaData;
class RsaDataDefaultTypeInternal;
extern RsaDataDefaultTypeInternal _RsaData_default_instance_;
}  // namespace im_login
namespace google {
namespace protobuf {
template<> ::im_login::AESData* Arena::CreateMaybeMessage<::im_login::AESData>(Arena*);
template<> ::im_login::Login* Arena::CreateMaybeMessage<::im_login::Login>(Arena*);
template<> ::im_login::LoginRsp* Arena::CreateMaybeMessage<::im_login::LoginRsp>(Arena*);
template<> ::im_login::LogoutRsp* Arena::CreateMaybeMessage<::im_login::LogoutRsp>(Arena*);
template<> ::im_login::RsaData* Arena::CreateMaybeMessage<::im_login::RsaData>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace im_login {

// ===================================================================

class RsaData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:im_login.RsaData) */ {
 public:
  RsaData();
  virtual ~RsaData();

  RsaData(const RsaData& from);

  inline RsaData& operator=(const RsaData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RsaData(RsaData&& from) noexcept
    : RsaData() {
    *this = ::std::move(from);
  }

  inline RsaData& operator=(RsaData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RsaData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RsaData* internal_default_instance() {
    return reinterpret_cast<const RsaData*>(
               &_RsaData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(RsaData* other);
  friend void swap(RsaData& a, RsaData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RsaData* New() const final {
    return CreateMaybeMessage<RsaData>(NULL);
  }

  RsaData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RsaData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RsaData& from);
  void MergeFrom(const RsaData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RsaData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes ecdhPubKey = 2;
  void clear_ecdhpubkey();
  static const int kEcdhPubKeyFieldNumber = 2;
  const ::std::string& ecdhpubkey() const;
  void set_ecdhpubkey(const ::std::string& value);
  #if LANG_CXX11
  void set_ecdhpubkey(::std::string&& value);
  #endif
  void set_ecdhpubkey(const char* value);
  void set_ecdhpubkey(const void* value, size_t size);
  ::std::string* mutable_ecdhpubkey();
  ::std::string* release_ecdhpubkey();
  void set_allocated_ecdhpubkey(::std::string* ecdhpubkey);

  // string aesKey = 3;
  void clear_aeskey();
  static const int kAesKeyFieldNumber = 3;
  const ::std::string& aeskey() const;
  void set_aeskey(const ::std::string& value);
  #if LANG_CXX11
  void set_aeskey(::std::string&& value);
  #endif
  void set_aeskey(const char* value);
  void set_aeskey(const char* value, size_t size);
  ::std::string* mutable_aeskey();
  ::std::string* release_aeskey();
  void set_allocated_aeskey(::std::string* aeskey);

  // int64 userId = 1;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int64 userid() const;
  void set_userid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:im_login.RsaData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ecdhpubkey_;
  ::google::protobuf::internal::ArenaStringPtr aeskey_;
  ::google::protobuf::int64 userid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_login_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AESData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:im_login.AESData) */ {
 public:
  AESData();
  virtual ~AESData();

  AESData(const AESData& from);

  inline AESData& operator=(const AESData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AESData(AESData&& from) noexcept
    : AESData() {
    *this = ::std::move(from);
  }

  inline AESData& operator=(AESData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AESData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AESData* internal_default_instance() {
    return reinterpret_cast<const AESData*>(
               &_AESData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(AESData* other);
  friend void swap(AESData& a, AESData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AESData* New() const final {
    return CreateMaybeMessage<AESData>(NULL);
  }

  AESData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AESData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AESData& from);
  void MergeFrom(const AESData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AESData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string token = 1;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // string devId = 3;
  void clear_devid();
  static const int kDevIdFieldNumber = 3;
  const ::std::string& devid() const;
  void set_devid(const ::std::string& value);
  #if LANG_CXX11
  void set_devid(::std::string&& value);
  #endif
  void set_devid(const char* value);
  void set_devid(const char* value, size_t size);
  ::std::string* mutable_devid();
  ::std::string* release_devid();
  void set_allocated_devid(::std::string* devid);

  // string other = 5;
  void clear_other();
  static const int kOtherFieldNumber = 5;
  const ::std::string& other() const;
  void set_other(const ::std::string& value);
  #if LANG_CXX11
  void set_other(::std::string&& value);
  #endif
  void set_other(const char* value);
  void set_other(const char* value, size_t size);
  ::std::string* mutable_other();
  ::std::string* release_other();
  void set_allocated_other(::std::string* other);

  // int64 loginSeq = 4;
  void clear_loginseq();
  static const int kLoginSeqFieldNumber = 4;
  ::google::protobuf::int64 loginseq() const;
  void set_loginseq(::google::protobuf::int64 value);

  // int32 clientTime = 2;
  void clear_clienttime();
  static const int kClientTimeFieldNumber = 2;
  ::google::protobuf::int32 clienttime() const;
  void set_clienttime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:im_login.AESData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::google::protobuf::internal::ArenaStringPtr devid_;
  ::google::protobuf::internal::ArenaStringPtr other_;
  ::google::protobuf::int64 loginseq_;
  ::google::protobuf::int32 clienttime_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_login_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Login : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:im_login.Login) */ {
 public:
  Login();
  virtual ~Login();

  Login(const Login& from);

  inline Login& operator=(const Login& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Login(Login&& from) noexcept
    : Login() {
    *this = ::std::move(from);
  }

  inline Login& operator=(Login&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Login& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Login* internal_default_instance() {
    return reinterpret_cast<const Login*>(
               &_Login_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Login* other);
  friend void swap(Login& a, Login& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Login* New() const final {
    return CreateMaybeMessage<Login>(NULL);
  }

  Login* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Login>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Login& from);
  void MergeFrom(const Login& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Login* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes rsaData = 2;
  void clear_rsadata();
  static const int kRsaDataFieldNumber = 2;
  const ::std::string& rsadata() const;
  void set_rsadata(const ::std::string& value);
  #if LANG_CXX11
  void set_rsadata(::std::string&& value);
  #endif
  void set_rsadata(const char* value);
  void set_rsadata(const void* value, size_t size);
  ::std::string* mutable_rsadata();
  ::std::string* release_rsadata();
  void set_allocated_rsadata(::std::string* rsadata);

  // bytes aesData = 3;
  void clear_aesdata();
  static const int kAesDataFieldNumber = 3;
  const ::std::string& aesdata() const;
  void set_aesdata(const ::std::string& value);
  #if LANG_CXX11
  void set_aesdata(::std::string&& value);
  #endif
  void set_aesdata(const char* value);
  void set_aesdata(const void* value, size_t size);
  ::std::string* mutable_aesdata();
  ::std::string* release_aesdata();
  void set_allocated_aesdata(::std::string* aesdata);

  // int32 rasVersion = 1;
  void clear_rasversion();
  static const int kRasVersionFieldNumber = 1;
  ::google::protobuf::int32 rasversion() const;
  void set_rasversion(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:im_login.Login)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr rsadata_;
  ::google::protobuf::internal::ArenaStringPtr aesdata_;
  ::google::protobuf::int32 rasversion_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_login_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LoginRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:im_login.LoginRsp) */ {
 public:
  LoginRsp();
  virtual ~LoginRsp();

  LoginRsp(const LoginRsp& from);

  inline LoginRsp& operator=(const LoginRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginRsp(LoginRsp&& from) noexcept
    : LoginRsp() {
    *this = ::std::move(from);
  }

  inline LoginRsp& operator=(LoginRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginRsp* internal_default_instance() {
    return reinterpret_cast<const LoginRsp*>(
               &_LoginRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(LoginRsp* other);
  friend void swap(LoginRsp& a, LoginRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginRsp* New() const final {
    return CreateMaybeMessage<LoginRsp>(NULL);
  }

  LoginRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LoginRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LoginRsp& from);
  void MergeFrom(const LoginRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string codeMsg = 2;
  void clear_codemsg();
  static const int kCodeMsgFieldNumber = 2;
  const ::std::string& codemsg() const;
  void set_codemsg(const ::std::string& value);
  #if LANG_CXX11
  void set_codemsg(::std::string&& value);
  #endif
  void set_codemsg(const char* value);
  void set_codemsg(const char* value, size_t size);
  ::std::string* mutable_codemsg();
  ::std::string* release_codemsg();
  void set_allocated_codemsg(::std::string* codemsg);

  // bytes ecdhServerPubKey = 3;
  void clear_ecdhserverpubkey();
  static const int kEcdhServerPubKeyFieldNumber = 3;
  const ::std::string& ecdhserverpubkey() const;
  void set_ecdhserverpubkey(const ::std::string& value);
  #if LANG_CXX11
  void set_ecdhserverpubkey(::std::string&& value);
  #endif
  void set_ecdhserverpubkey(const char* value);
  void set_ecdhserverpubkey(const void* value, size_t size);
  ::std::string* mutable_ecdhserverpubkey();
  ::std::string* release_ecdhserverpubkey();
  void set_allocated_ecdhserverpubkey(::std::string* ecdhserverpubkey);

  // bytes sessionKey = 4;
  void clear_sessionkey();
  static const int kSessionKeyFieldNumber = 4;
  const ::std::string& sessionkey() const;
  void set_sessionkey(const ::std::string& value);
  #if LANG_CXX11
  void set_sessionkey(::std::string&& value);
  #endif
  void set_sessionkey(const char* value);
  void set_sessionkey(const void* value, size_t size);
  ::std::string* mutable_sessionkey();
  ::std::string* release_sessionkey();
  void set_allocated_sessionkey(::std::string* sessionkey);

  // string sessionID = 5;
  void clear_sessionid();
  static const int kSessionIDFieldNumber = 5;
  const ::std::string& sessionid() const;
  void set_sessionid(const ::std::string& value);
  #if LANG_CXX11
  void set_sessionid(::std::string&& value);
  #endif
  void set_sessionid(const char* value);
  void set_sessionid(const char* value, size_t size);
  ::std::string* mutable_sessionid();
  ::std::string* release_sessionid();
  void set_allocated_sessionid(::std::string* sessionid);

  // string other = 8;
  void clear_other();
  static const int kOtherFieldNumber = 8;
  const ::std::string& other() const;
  void set_other(const ::std::string& value);
  #if LANG_CXX11
  void set_other(::std::string&& value);
  #endif
  void set_other(const char* value);
  void set_other(const char* value, size_t size);
  ::std::string* mutable_other();
  ::std::string* release_other();
  void set_allocated_other(::std::string* other);

  // int32 code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // int32 startSeq = 6;
  void clear_startseq();
  static const int kStartSeqFieldNumber = 6;
  ::google::protobuf::int32 startseq() const;
  void set_startseq(::google::protobuf::int32 value);

  // int64 loginSeq = 9;
  void clear_loginseq();
  static const int kLoginSeqFieldNumber = 9;
  ::google::protobuf::int64 loginseq() const;
  void set_loginseq(::google::protobuf::int64 value);

  // int32 serverTime = 7;
  void clear_servertime();
  static const int kServerTimeFieldNumber = 7;
  ::google::protobuf::int32 servertime() const;
  void set_servertime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:im_login.LoginRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr codemsg_;
  ::google::protobuf::internal::ArenaStringPtr ecdhserverpubkey_;
  ::google::protobuf::internal::ArenaStringPtr sessionkey_;
  ::google::protobuf::internal::ArenaStringPtr sessionid_;
  ::google::protobuf::internal::ArenaStringPtr other_;
  ::google::protobuf::int32 code_;
  ::google::protobuf::int32 startseq_;
  ::google::protobuf::int64 loginseq_;
  ::google::protobuf::int32 servertime_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_login_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LogoutRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:im_login.LogoutRsp) */ {
 public:
  LogoutRsp();
  virtual ~LogoutRsp();

  LogoutRsp(const LogoutRsp& from);

  inline LogoutRsp& operator=(const LogoutRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LogoutRsp(LogoutRsp&& from) noexcept
    : LogoutRsp() {
    *this = ::std::move(from);
  }

  inline LogoutRsp& operator=(LogoutRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogoutRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogoutRsp* internal_default_instance() {
    return reinterpret_cast<const LogoutRsp*>(
               &_LogoutRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(LogoutRsp* other);
  friend void swap(LogoutRsp& a, LogoutRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LogoutRsp* New() const final {
    return CreateMaybeMessage<LogoutRsp>(NULL);
  }

  LogoutRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LogoutRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LogoutRsp& from);
  void MergeFrom(const LogoutRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogoutRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .common.errorinfo error = 1;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  private:
  const ::common::errorinfo& _internal_error() const;
  public:
  const ::common::errorinfo& error() const;
  ::common::errorinfo* release_error();
  ::common::errorinfo* mutable_error();
  void set_allocated_error(::common::errorinfo* error);

  // @@protoc_insertion_point(class_scope:im_login.LogoutRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::common::errorinfo* error_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_login_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RsaData

// int64 userId = 1;
inline void RsaData::clear_userid() {
  userid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RsaData::userid() const {
  // @@protoc_insertion_point(field_get:im_login.RsaData.userId)
  return userid_;
}
inline void RsaData::set_userid(::google::protobuf::int64 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:im_login.RsaData.userId)
}

// bytes ecdhPubKey = 2;
inline void RsaData::clear_ecdhpubkey() {
  ecdhpubkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RsaData::ecdhpubkey() const {
  // @@protoc_insertion_point(field_get:im_login.RsaData.ecdhPubKey)
  return ecdhpubkey_.GetNoArena();
}
inline void RsaData::set_ecdhpubkey(const ::std::string& value) {
  
  ecdhpubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im_login.RsaData.ecdhPubKey)
}
#if LANG_CXX11
inline void RsaData::set_ecdhpubkey(::std::string&& value) {
  
  ecdhpubkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im_login.RsaData.ecdhPubKey)
}
#endif
inline void RsaData::set_ecdhpubkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ecdhpubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im_login.RsaData.ecdhPubKey)
}
inline void RsaData::set_ecdhpubkey(const void* value, size_t size) {
  
  ecdhpubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im_login.RsaData.ecdhPubKey)
}
inline ::std::string* RsaData::mutable_ecdhpubkey() {
  
  // @@protoc_insertion_point(field_mutable:im_login.RsaData.ecdhPubKey)
  return ecdhpubkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RsaData::release_ecdhpubkey() {
  // @@protoc_insertion_point(field_release:im_login.RsaData.ecdhPubKey)
  
  return ecdhpubkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RsaData::set_allocated_ecdhpubkey(::std::string* ecdhpubkey) {
  if (ecdhpubkey != NULL) {
    
  } else {
    
  }
  ecdhpubkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ecdhpubkey);
  // @@protoc_insertion_point(field_set_allocated:im_login.RsaData.ecdhPubKey)
}

// string aesKey = 3;
inline void RsaData::clear_aeskey() {
  aeskey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RsaData::aeskey() const {
  // @@protoc_insertion_point(field_get:im_login.RsaData.aesKey)
  return aeskey_.GetNoArena();
}
inline void RsaData::set_aeskey(const ::std::string& value) {
  
  aeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im_login.RsaData.aesKey)
}
#if LANG_CXX11
inline void RsaData::set_aeskey(::std::string&& value) {
  
  aeskey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im_login.RsaData.aesKey)
}
#endif
inline void RsaData::set_aeskey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  aeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im_login.RsaData.aesKey)
}
inline void RsaData::set_aeskey(const char* value, size_t size) {
  
  aeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im_login.RsaData.aesKey)
}
inline ::std::string* RsaData::mutable_aeskey() {
  
  // @@protoc_insertion_point(field_mutable:im_login.RsaData.aesKey)
  return aeskey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RsaData::release_aeskey() {
  // @@protoc_insertion_point(field_release:im_login.RsaData.aesKey)
  
  return aeskey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RsaData::set_allocated_aeskey(::std::string* aeskey) {
  if (aeskey != NULL) {
    
  } else {
    
  }
  aeskey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), aeskey);
  // @@protoc_insertion_point(field_set_allocated:im_login.RsaData.aesKey)
}

// -------------------------------------------------------------------

// AESData

// string token = 1;
inline void AESData::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AESData::token() const {
  // @@protoc_insertion_point(field_get:im_login.AESData.token)
  return token_.GetNoArena();
}
inline void AESData::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im_login.AESData.token)
}
#if LANG_CXX11
inline void AESData::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im_login.AESData.token)
}
#endif
inline void AESData::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im_login.AESData.token)
}
inline void AESData::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im_login.AESData.token)
}
inline ::std::string* AESData::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:im_login.AESData.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AESData::release_token() {
  // @@protoc_insertion_point(field_release:im_login.AESData.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AESData::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:im_login.AESData.token)
}

// int32 clientTime = 2;
inline void AESData::clear_clienttime() {
  clienttime_ = 0;
}
inline ::google::protobuf::int32 AESData::clienttime() const {
  // @@protoc_insertion_point(field_get:im_login.AESData.clientTime)
  return clienttime_;
}
inline void AESData::set_clienttime(::google::protobuf::int32 value) {
  
  clienttime_ = value;
  // @@protoc_insertion_point(field_set:im_login.AESData.clientTime)
}

// string devId = 3;
inline void AESData::clear_devid() {
  devid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AESData::devid() const {
  // @@protoc_insertion_point(field_get:im_login.AESData.devId)
  return devid_.GetNoArena();
}
inline void AESData::set_devid(const ::std::string& value) {
  
  devid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im_login.AESData.devId)
}
#if LANG_CXX11
inline void AESData::set_devid(::std::string&& value) {
  
  devid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im_login.AESData.devId)
}
#endif
inline void AESData::set_devid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  devid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im_login.AESData.devId)
}
inline void AESData::set_devid(const char* value, size_t size) {
  
  devid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im_login.AESData.devId)
}
inline ::std::string* AESData::mutable_devid() {
  
  // @@protoc_insertion_point(field_mutable:im_login.AESData.devId)
  return devid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AESData::release_devid() {
  // @@protoc_insertion_point(field_release:im_login.AESData.devId)
  
  return devid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AESData::set_allocated_devid(::std::string* devid) {
  if (devid != NULL) {
    
  } else {
    
  }
  devid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devid);
  // @@protoc_insertion_point(field_set_allocated:im_login.AESData.devId)
}

// int64 loginSeq = 4;
inline void AESData::clear_loginseq() {
  loginseq_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 AESData::loginseq() const {
  // @@protoc_insertion_point(field_get:im_login.AESData.loginSeq)
  return loginseq_;
}
inline void AESData::set_loginseq(::google::protobuf::int64 value) {
  
  loginseq_ = value;
  // @@protoc_insertion_point(field_set:im_login.AESData.loginSeq)
}

// string other = 5;
inline void AESData::clear_other() {
  other_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AESData::other() const {
  // @@protoc_insertion_point(field_get:im_login.AESData.other)
  return other_.GetNoArena();
}
inline void AESData::set_other(const ::std::string& value) {
  
  other_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im_login.AESData.other)
}
#if LANG_CXX11
inline void AESData::set_other(::std::string&& value) {
  
  other_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im_login.AESData.other)
}
#endif
inline void AESData::set_other(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  other_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im_login.AESData.other)
}
inline void AESData::set_other(const char* value, size_t size) {
  
  other_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im_login.AESData.other)
}
inline ::std::string* AESData::mutable_other() {
  
  // @@protoc_insertion_point(field_mutable:im_login.AESData.other)
  return other_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AESData::release_other() {
  // @@protoc_insertion_point(field_release:im_login.AESData.other)
  
  return other_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AESData::set_allocated_other(::std::string* other) {
  if (other != NULL) {
    
  } else {
    
  }
  other_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), other);
  // @@protoc_insertion_point(field_set_allocated:im_login.AESData.other)
}

// -------------------------------------------------------------------

// Login

// int32 rasVersion = 1;
inline void Login::clear_rasversion() {
  rasversion_ = 0;
}
inline ::google::protobuf::int32 Login::rasversion() const {
  // @@protoc_insertion_point(field_get:im_login.Login.rasVersion)
  return rasversion_;
}
inline void Login::set_rasversion(::google::protobuf::int32 value) {
  
  rasversion_ = value;
  // @@protoc_insertion_point(field_set:im_login.Login.rasVersion)
}

// bytes rsaData = 2;
inline void Login::clear_rsadata() {
  rsadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Login::rsadata() const {
  // @@protoc_insertion_point(field_get:im_login.Login.rsaData)
  return rsadata_.GetNoArena();
}
inline void Login::set_rsadata(const ::std::string& value) {
  
  rsadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im_login.Login.rsaData)
}
#if LANG_CXX11
inline void Login::set_rsadata(::std::string&& value) {
  
  rsadata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im_login.Login.rsaData)
}
#endif
inline void Login::set_rsadata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  rsadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im_login.Login.rsaData)
}
inline void Login::set_rsadata(const void* value, size_t size) {
  
  rsadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im_login.Login.rsaData)
}
inline ::std::string* Login::mutable_rsadata() {
  
  // @@protoc_insertion_point(field_mutable:im_login.Login.rsaData)
  return rsadata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Login::release_rsadata() {
  // @@protoc_insertion_point(field_release:im_login.Login.rsaData)
  
  return rsadata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Login::set_allocated_rsadata(::std::string* rsadata) {
  if (rsadata != NULL) {
    
  } else {
    
  }
  rsadata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rsadata);
  // @@protoc_insertion_point(field_set_allocated:im_login.Login.rsaData)
}

// bytes aesData = 3;
inline void Login::clear_aesdata() {
  aesdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Login::aesdata() const {
  // @@protoc_insertion_point(field_get:im_login.Login.aesData)
  return aesdata_.GetNoArena();
}
inline void Login::set_aesdata(const ::std::string& value) {
  
  aesdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im_login.Login.aesData)
}
#if LANG_CXX11
inline void Login::set_aesdata(::std::string&& value) {
  
  aesdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im_login.Login.aesData)
}
#endif
inline void Login::set_aesdata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  aesdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im_login.Login.aesData)
}
inline void Login::set_aesdata(const void* value, size_t size) {
  
  aesdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im_login.Login.aesData)
}
inline ::std::string* Login::mutable_aesdata() {
  
  // @@protoc_insertion_point(field_mutable:im_login.Login.aesData)
  return aesdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Login::release_aesdata() {
  // @@protoc_insertion_point(field_release:im_login.Login.aesData)
  
  return aesdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Login::set_allocated_aesdata(::std::string* aesdata) {
  if (aesdata != NULL) {
    
  } else {
    
  }
  aesdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), aesdata);
  // @@protoc_insertion_point(field_set_allocated:im_login.Login.aesData)
}

// -------------------------------------------------------------------

// LoginRsp

// int32 code = 1;
inline void LoginRsp::clear_code() {
  code_ = 0;
}
inline ::google::protobuf::int32 LoginRsp::code() const {
  // @@protoc_insertion_point(field_get:im_login.LoginRsp.code)
  return code_;
}
inline void LoginRsp::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:im_login.LoginRsp.code)
}

// string codeMsg = 2;
inline void LoginRsp::clear_codemsg() {
  codemsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginRsp::codemsg() const {
  // @@protoc_insertion_point(field_get:im_login.LoginRsp.codeMsg)
  return codemsg_.GetNoArena();
}
inline void LoginRsp::set_codemsg(const ::std::string& value) {
  
  codemsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im_login.LoginRsp.codeMsg)
}
#if LANG_CXX11
inline void LoginRsp::set_codemsg(::std::string&& value) {
  
  codemsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im_login.LoginRsp.codeMsg)
}
#endif
inline void LoginRsp::set_codemsg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  codemsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im_login.LoginRsp.codeMsg)
}
inline void LoginRsp::set_codemsg(const char* value, size_t size) {
  
  codemsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im_login.LoginRsp.codeMsg)
}
inline ::std::string* LoginRsp::mutable_codemsg() {
  
  // @@protoc_insertion_point(field_mutable:im_login.LoginRsp.codeMsg)
  return codemsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginRsp::release_codemsg() {
  // @@protoc_insertion_point(field_release:im_login.LoginRsp.codeMsg)
  
  return codemsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRsp::set_allocated_codemsg(::std::string* codemsg) {
  if (codemsg != NULL) {
    
  } else {
    
  }
  codemsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), codemsg);
  // @@protoc_insertion_point(field_set_allocated:im_login.LoginRsp.codeMsg)
}

// bytes ecdhServerPubKey = 3;
inline void LoginRsp::clear_ecdhserverpubkey() {
  ecdhserverpubkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginRsp::ecdhserverpubkey() const {
  // @@protoc_insertion_point(field_get:im_login.LoginRsp.ecdhServerPubKey)
  return ecdhserverpubkey_.GetNoArena();
}
inline void LoginRsp::set_ecdhserverpubkey(const ::std::string& value) {
  
  ecdhserverpubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im_login.LoginRsp.ecdhServerPubKey)
}
#if LANG_CXX11
inline void LoginRsp::set_ecdhserverpubkey(::std::string&& value) {
  
  ecdhserverpubkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im_login.LoginRsp.ecdhServerPubKey)
}
#endif
inline void LoginRsp::set_ecdhserverpubkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ecdhserverpubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im_login.LoginRsp.ecdhServerPubKey)
}
inline void LoginRsp::set_ecdhserverpubkey(const void* value, size_t size) {
  
  ecdhserverpubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im_login.LoginRsp.ecdhServerPubKey)
}
inline ::std::string* LoginRsp::mutable_ecdhserverpubkey() {
  
  // @@protoc_insertion_point(field_mutable:im_login.LoginRsp.ecdhServerPubKey)
  return ecdhserverpubkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginRsp::release_ecdhserverpubkey() {
  // @@protoc_insertion_point(field_release:im_login.LoginRsp.ecdhServerPubKey)
  
  return ecdhserverpubkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRsp::set_allocated_ecdhserverpubkey(::std::string* ecdhserverpubkey) {
  if (ecdhserverpubkey != NULL) {
    
  } else {
    
  }
  ecdhserverpubkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ecdhserverpubkey);
  // @@protoc_insertion_point(field_set_allocated:im_login.LoginRsp.ecdhServerPubKey)
}

// bytes sessionKey = 4;
inline void LoginRsp::clear_sessionkey() {
  sessionkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginRsp::sessionkey() const {
  // @@protoc_insertion_point(field_get:im_login.LoginRsp.sessionKey)
  return sessionkey_.GetNoArena();
}
inline void LoginRsp::set_sessionkey(const ::std::string& value) {
  
  sessionkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im_login.LoginRsp.sessionKey)
}
#if LANG_CXX11
inline void LoginRsp::set_sessionkey(::std::string&& value) {
  
  sessionkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im_login.LoginRsp.sessionKey)
}
#endif
inline void LoginRsp::set_sessionkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sessionkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im_login.LoginRsp.sessionKey)
}
inline void LoginRsp::set_sessionkey(const void* value, size_t size) {
  
  sessionkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im_login.LoginRsp.sessionKey)
}
inline ::std::string* LoginRsp::mutable_sessionkey() {
  
  // @@protoc_insertion_point(field_mutable:im_login.LoginRsp.sessionKey)
  return sessionkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginRsp::release_sessionkey() {
  // @@protoc_insertion_point(field_release:im_login.LoginRsp.sessionKey)
  
  return sessionkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRsp::set_allocated_sessionkey(::std::string* sessionkey) {
  if (sessionkey != NULL) {
    
  } else {
    
  }
  sessionkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sessionkey);
  // @@protoc_insertion_point(field_set_allocated:im_login.LoginRsp.sessionKey)
}

// string sessionID = 5;
inline void LoginRsp::clear_sessionid() {
  sessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginRsp::sessionid() const {
  // @@protoc_insertion_point(field_get:im_login.LoginRsp.sessionID)
  return sessionid_.GetNoArena();
}
inline void LoginRsp::set_sessionid(const ::std::string& value) {
  
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im_login.LoginRsp.sessionID)
}
#if LANG_CXX11
inline void LoginRsp::set_sessionid(::std::string&& value) {
  
  sessionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im_login.LoginRsp.sessionID)
}
#endif
inline void LoginRsp::set_sessionid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im_login.LoginRsp.sessionID)
}
inline void LoginRsp::set_sessionid(const char* value, size_t size) {
  
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im_login.LoginRsp.sessionID)
}
inline ::std::string* LoginRsp::mutable_sessionid() {
  
  // @@protoc_insertion_point(field_mutable:im_login.LoginRsp.sessionID)
  return sessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginRsp::release_sessionid() {
  // @@protoc_insertion_point(field_release:im_login.LoginRsp.sessionID)
  
  return sessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRsp::set_allocated_sessionid(::std::string* sessionid) {
  if (sessionid != NULL) {
    
  } else {
    
  }
  sessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sessionid);
  // @@protoc_insertion_point(field_set_allocated:im_login.LoginRsp.sessionID)
}

// int32 startSeq = 6;
inline void LoginRsp::clear_startseq() {
  startseq_ = 0;
}
inline ::google::protobuf::int32 LoginRsp::startseq() const {
  // @@protoc_insertion_point(field_get:im_login.LoginRsp.startSeq)
  return startseq_;
}
inline void LoginRsp::set_startseq(::google::protobuf::int32 value) {
  
  startseq_ = value;
  // @@protoc_insertion_point(field_set:im_login.LoginRsp.startSeq)
}

// int32 serverTime = 7;
inline void LoginRsp::clear_servertime() {
  servertime_ = 0;
}
inline ::google::protobuf::int32 LoginRsp::servertime() const {
  // @@protoc_insertion_point(field_get:im_login.LoginRsp.serverTime)
  return servertime_;
}
inline void LoginRsp::set_servertime(::google::protobuf::int32 value) {
  
  servertime_ = value;
  // @@protoc_insertion_point(field_set:im_login.LoginRsp.serverTime)
}

// string other = 8;
inline void LoginRsp::clear_other() {
  other_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginRsp::other() const {
  // @@protoc_insertion_point(field_get:im_login.LoginRsp.other)
  return other_.GetNoArena();
}
inline void LoginRsp::set_other(const ::std::string& value) {
  
  other_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im_login.LoginRsp.other)
}
#if LANG_CXX11
inline void LoginRsp::set_other(::std::string&& value) {
  
  other_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im_login.LoginRsp.other)
}
#endif
inline void LoginRsp::set_other(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  other_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im_login.LoginRsp.other)
}
inline void LoginRsp::set_other(const char* value, size_t size) {
  
  other_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im_login.LoginRsp.other)
}
inline ::std::string* LoginRsp::mutable_other() {
  
  // @@protoc_insertion_point(field_mutable:im_login.LoginRsp.other)
  return other_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginRsp::release_other() {
  // @@protoc_insertion_point(field_release:im_login.LoginRsp.other)
  
  return other_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRsp::set_allocated_other(::std::string* other) {
  if (other != NULL) {
    
  } else {
    
  }
  other_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), other);
  // @@protoc_insertion_point(field_set_allocated:im_login.LoginRsp.other)
}

// int64 loginSeq = 9;
inline void LoginRsp::clear_loginseq() {
  loginseq_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 LoginRsp::loginseq() const {
  // @@protoc_insertion_point(field_get:im_login.LoginRsp.loginSeq)
  return loginseq_;
}
inline void LoginRsp::set_loginseq(::google::protobuf::int64 value) {
  
  loginseq_ = value;
  // @@protoc_insertion_point(field_set:im_login.LoginRsp.loginSeq)
}

// -------------------------------------------------------------------

// LogoutRsp

// .common.errorinfo error = 1;
inline bool LogoutRsp::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
inline const ::common::errorinfo& LogoutRsp::_internal_error() const {
  return *error_;
}
inline const ::common::errorinfo& LogoutRsp::error() const {
  const ::common::errorinfo* p = error_;
  // @@protoc_insertion_point(field_get:im_login.LogoutRsp.error)
  return p != NULL ? *p : *reinterpret_cast<const ::common::errorinfo*>(
      &::common::_errorinfo_default_instance_);
}
inline ::common::errorinfo* LogoutRsp::release_error() {
  // @@protoc_insertion_point(field_release:im_login.LogoutRsp.error)
  
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline ::common::errorinfo* LogoutRsp::mutable_error() {
  
  if (error_ == NULL) {
    auto* p = CreateMaybeMessage<::common::errorinfo>(GetArenaNoVirtual());
    error_ = p;
  }
  // @@protoc_insertion_point(field_mutable:im_login.LogoutRsp.error)
  return error_;
}
inline void LogoutRsp::set_allocated_error(::common::errorinfo* error) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(error_);
  }
  if (error) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      error = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:im_login.LogoutRsp.error)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace im_login

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_login_2eproto
