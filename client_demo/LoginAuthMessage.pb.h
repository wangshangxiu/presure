// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LoginAuthMessage.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_LoginAuthMessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_LoginAuthMessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_LoginAuthMessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_LoginAuthMessage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_LoginAuthMessage_2eproto;
class AESData;
class AESDataDefaultTypeInternal;
extern AESDataDefaultTypeInternal _AESData_default_instance_;
class LoginRsp;
class LoginRspDefaultTypeInternal;
extern LoginRspDefaultTypeInternal _LoginRsp_default_instance_;
class RsaData;
class RsaDataDefaultTypeInternal;
extern RsaDataDefaultTypeInternal _RsaData_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::AESData* Arena::CreateMaybeMessage<::AESData>(Arena*);
template<> ::LoginRsp* Arena::CreateMaybeMessage<::LoginRsp>(Arena*);
template<> ::RsaData* Arena::CreateMaybeMessage<::RsaData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class AESData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AESData) */ {
 public:
  AESData();
  virtual ~AESData();

  AESData(const AESData& from);
  AESData(AESData&& from) noexcept
    : AESData() {
    *this = ::std::move(from);
  }

  inline AESData& operator=(const AESData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AESData& operator=(AESData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AESData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AESData* internal_default_instance() {
    return reinterpret_cast<const AESData*>(
               &_AESData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AESData& a, AESData& b) {
    a.Swap(&b);
  }
  inline void Swap(AESData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AESData* New() const final {
    return CreateMaybeMessage<AESData>(nullptr);
  }

  AESData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AESData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AESData& from);
  void MergeFrom(const AESData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AESData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AESData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LoginAuthMessage_2eproto);
    return ::descriptor_table_LoginAuthMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kDevIdFieldNumber = 3,
    kOtherFieldNumber = 5,
    kLoginSeqFieldNumber = 4,
    kClientTimeFieldNumber = 2,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // string devId = 3;
  void clear_devid();
  const std::string& devid() const;
  void set_devid(const std::string& value);
  void set_devid(std::string&& value);
  void set_devid(const char* value);
  void set_devid(const char* value, size_t size);
  std::string* mutable_devid();
  std::string* release_devid();
  void set_allocated_devid(std::string* devid);
  private:
  const std::string& _internal_devid() const;
  void _internal_set_devid(const std::string& value);
  std::string* _internal_mutable_devid();
  public:

  // string other = 5;
  void clear_other();
  const std::string& other() const;
  void set_other(const std::string& value);
  void set_other(std::string&& value);
  void set_other(const char* value);
  void set_other(const char* value, size_t size);
  std::string* mutable_other();
  std::string* release_other();
  void set_allocated_other(std::string* other);
  private:
  const std::string& _internal_other() const;
  void _internal_set_other(const std::string& value);
  std::string* _internal_mutable_other();
  public:

  // int64 loginSeq = 4;
  void clear_loginseq();
  ::PROTOBUF_NAMESPACE_ID::int64 loginseq() const;
  void set_loginseq(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_loginseq() const;
  void _internal_set_loginseq(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 clientTime = 2;
  void clear_clienttime();
  ::PROTOBUF_NAMESPACE_ID::int32 clienttime() const;
  void set_clienttime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_clienttime() const;
  void _internal_set_clienttime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:AESData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr devid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr other_;
  ::PROTOBUF_NAMESPACE_ID::int64 loginseq_;
  ::PROTOBUF_NAMESPACE_ID::int32 clienttime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LoginAuthMessage_2eproto;
};
// -------------------------------------------------------------------

class RsaData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RsaData) */ {
 public:
  RsaData();
  virtual ~RsaData();

  RsaData(const RsaData& from);
  RsaData(RsaData&& from) noexcept
    : RsaData() {
    *this = ::std::move(from);
  }

  inline RsaData& operator=(const RsaData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RsaData& operator=(RsaData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RsaData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RsaData* internal_default_instance() {
    return reinterpret_cast<const RsaData*>(
               &_RsaData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RsaData& a, RsaData& b) {
    a.Swap(&b);
  }
  inline void Swap(RsaData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RsaData* New() const final {
    return CreateMaybeMessage<RsaData>(nullptr);
  }

  RsaData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RsaData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RsaData& from);
  void MergeFrom(const RsaData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RsaData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RsaData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LoginAuthMessage_2eproto);
    return ::descriptor_table_LoginAuthMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEcdhPubKeyFieldNumber = 2,
    kAesKeyFieldNumber = 3,
    kUserIdFieldNumber = 1,
  };
  // bytes ecdhPubKey = 2;
  void clear_ecdhpubkey();
  const std::string& ecdhpubkey() const;
  void set_ecdhpubkey(const std::string& value);
  void set_ecdhpubkey(std::string&& value);
  void set_ecdhpubkey(const char* value);
  void set_ecdhpubkey(const void* value, size_t size);
  std::string* mutable_ecdhpubkey();
  std::string* release_ecdhpubkey();
  void set_allocated_ecdhpubkey(std::string* ecdhpubkey);
  private:
  const std::string& _internal_ecdhpubkey() const;
  void _internal_set_ecdhpubkey(const std::string& value);
  std::string* _internal_mutable_ecdhpubkey();
  public:

  // string aesKey = 3;
  void clear_aeskey();
  const std::string& aeskey() const;
  void set_aeskey(const std::string& value);
  void set_aeskey(std::string&& value);
  void set_aeskey(const char* value);
  void set_aeskey(const char* value, size_t size);
  std::string* mutable_aeskey();
  std::string* release_aeskey();
  void set_allocated_aeskey(std::string* aeskey);
  private:
  const std::string& _internal_aeskey() const;
  void _internal_set_aeskey(const std::string& value);
  std::string* _internal_mutable_aeskey();
  public:

  // int32 userId = 1;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:RsaData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ecdhpubkey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr aeskey_;
  ::PROTOBUF_NAMESPACE_ID::int32 userid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LoginAuthMessage_2eproto;
};
// -------------------------------------------------------------------

class LoginRsp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LoginRsp) */ {
 public:
  LoginRsp();
  virtual ~LoginRsp();

  LoginRsp(const LoginRsp& from);
  LoginRsp(LoginRsp&& from) noexcept
    : LoginRsp() {
    *this = ::std::move(from);
  }

  inline LoginRsp& operator=(const LoginRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginRsp& operator=(LoginRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginRsp* internal_default_instance() {
    return reinterpret_cast<const LoginRsp*>(
               &_LoginRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LoginRsp& a, LoginRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginRsp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginRsp* New() const final {
    return CreateMaybeMessage<LoginRsp>(nullptr);
  }

  LoginRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginRsp& from);
  void MergeFrom(const LoginRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LoginRsp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LoginAuthMessage_2eproto);
    return ::descriptor_table_LoginAuthMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeMsgFieldNumber = 2,
    kEcdhServerPubKeyFieldNumber = 3,
    kSessionKeyFieldNumber = 4,
    kSessionIDFieldNumber = 5,
    kOtherFieldNumber = 8,
    kCodeFieldNumber = 1,
    kStartSeqFieldNumber = 6,
    kServerTimeFieldNumber = 7,
  };
  // string codeMsg = 2;
  void clear_codemsg();
  const std::string& codemsg() const;
  void set_codemsg(const std::string& value);
  void set_codemsg(std::string&& value);
  void set_codemsg(const char* value);
  void set_codemsg(const char* value, size_t size);
  std::string* mutable_codemsg();
  std::string* release_codemsg();
  void set_allocated_codemsg(std::string* codemsg);
  private:
  const std::string& _internal_codemsg() const;
  void _internal_set_codemsg(const std::string& value);
  std::string* _internal_mutable_codemsg();
  public:

  // bytes ecdhServerPubKey = 3;
  void clear_ecdhserverpubkey();
  const std::string& ecdhserverpubkey() const;
  void set_ecdhserverpubkey(const std::string& value);
  void set_ecdhserverpubkey(std::string&& value);
  void set_ecdhserverpubkey(const char* value);
  void set_ecdhserverpubkey(const void* value, size_t size);
  std::string* mutable_ecdhserverpubkey();
  std::string* release_ecdhserverpubkey();
  void set_allocated_ecdhserverpubkey(std::string* ecdhserverpubkey);
  private:
  const std::string& _internal_ecdhserverpubkey() const;
  void _internal_set_ecdhserverpubkey(const std::string& value);
  std::string* _internal_mutable_ecdhserverpubkey();
  public:

  // string sessionKey = 4;
  void clear_sessionkey();
  const std::string& sessionkey() const;
  void set_sessionkey(const std::string& value);
  void set_sessionkey(std::string&& value);
  void set_sessionkey(const char* value);
  void set_sessionkey(const char* value, size_t size);
  std::string* mutable_sessionkey();
  std::string* release_sessionkey();
  void set_allocated_sessionkey(std::string* sessionkey);
  private:
  const std::string& _internal_sessionkey() const;
  void _internal_set_sessionkey(const std::string& value);
  std::string* _internal_mutable_sessionkey();
  public:

  // string sessionID = 5;
  void clear_sessionid();
  const std::string& sessionid() const;
  void set_sessionid(const std::string& value);
  void set_sessionid(std::string&& value);
  void set_sessionid(const char* value);
  void set_sessionid(const char* value, size_t size);
  std::string* mutable_sessionid();
  std::string* release_sessionid();
  void set_allocated_sessionid(std::string* sessionid);
  private:
  const std::string& _internal_sessionid() const;
  void _internal_set_sessionid(const std::string& value);
  std::string* _internal_mutable_sessionid();
  public:

  // string other = 8;
  void clear_other();
  const std::string& other() const;
  void set_other(const std::string& value);
  void set_other(std::string&& value);
  void set_other(const char* value);
  void set_other(const char* value, size_t size);
  std::string* mutable_other();
  std::string* release_other();
  void set_allocated_other(std::string* other);
  private:
  const std::string& _internal_other() const;
  void _internal_set_other(const std::string& value);
  std::string* _internal_mutable_other();
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 startSeq = 6;
  void clear_startseq();
  ::PROTOBUF_NAMESPACE_ID::int32 startseq() const;
  void set_startseq(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_startseq() const;
  void _internal_set_startseq(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 serverTime = 7;
  void clear_servertime();
  ::PROTOBUF_NAMESPACE_ID::int32 servertime() const;
  void set_servertime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_servertime() const;
  void _internal_set_servertime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:LoginRsp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr codemsg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ecdhserverpubkey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sessionkey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sessionid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr other_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  ::PROTOBUF_NAMESPACE_ID::int32 startseq_;
  ::PROTOBUF_NAMESPACE_ID::int32 servertime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LoginAuthMessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AESData

// string token = 1;
inline void AESData::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AESData::token() const {
  // @@protoc_insertion_point(field_get:AESData.token)
  return _internal_token();
}
inline void AESData::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:AESData.token)
}
inline std::string* AESData::mutable_token() {
  // @@protoc_insertion_point(field_mutable:AESData.token)
  return _internal_mutable_token();
}
inline const std::string& AESData::_internal_token() const {
  return token_.GetNoArena();
}
inline void AESData::_internal_set_token(const std::string& value) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AESData::set_token(std::string&& value) {
  
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AESData.token)
}
inline void AESData::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AESData.token)
}
inline void AESData::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AESData.token)
}
inline std::string* AESData::_internal_mutable_token() {
  
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AESData::release_token() {
  // @@protoc_insertion_point(field_release:AESData.token)
  
  return token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AESData::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:AESData.token)
}

// int32 clientTime = 2;
inline void AESData::clear_clienttime() {
  clienttime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AESData::_internal_clienttime() const {
  return clienttime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AESData::clienttime() const {
  // @@protoc_insertion_point(field_get:AESData.clientTime)
  return _internal_clienttime();
}
inline void AESData::_internal_set_clienttime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  clienttime_ = value;
}
inline void AESData::set_clienttime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_clienttime(value);
  // @@protoc_insertion_point(field_set:AESData.clientTime)
}

// string devId = 3;
inline void AESData::clear_devid() {
  devid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AESData::devid() const {
  // @@protoc_insertion_point(field_get:AESData.devId)
  return _internal_devid();
}
inline void AESData::set_devid(const std::string& value) {
  _internal_set_devid(value);
  // @@protoc_insertion_point(field_set:AESData.devId)
}
inline std::string* AESData::mutable_devid() {
  // @@protoc_insertion_point(field_mutable:AESData.devId)
  return _internal_mutable_devid();
}
inline const std::string& AESData::_internal_devid() const {
  return devid_.GetNoArena();
}
inline void AESData::_internal_set_devid(const std::string& value) {
  
  devid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AESData::set_devid(std::string&& value) {
  
  devid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AESData.devId)
}
inline void AESData::set_devid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  devid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AESData.devId)
}
inline void AESData::set_devid(const char* value, size_t size) {
  
  devid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AESData.devId)
}
inline std::string* AESData::_internal_mutable_devid() {
  
  return devid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AESData::release_devid() {
  // @@protoc_insertion_point(field_release:AESData.devId)
  
  return devid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AESData::set_allocated_devid(std::string* devid) {
  if (devid != nullptr) {
    
  } else {
    
  }
  devid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), devid);
  // @@protoc_insertion_point(field_set_allocated:AESData.devId)
}

// int64 loginSeq = 4;
inline void AESData::clear_loginseq() {
  loginseq_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AESData::_internal_loginseq() const {
  return loginseq_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AESData::loginseq() const {
  // @@protoc_insertion_point(field_get:AESData.loginSeq)
  return _internal_loginseq();
}
inline void AESData::_internal_set_loginseq(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  loginseq_ = value;
}
inline void AESData::set_loginseq(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_loginseq(value);
  // @@protoc_insertion_point(field_set:AESData.loginSeq)
}

// string other = 5;
inline void AESData::clear_other() {
  other_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AESData::other() const {
  // @@protoc_insertion_point(field_get:AESData.other)
  return _internal_other();
}
inline void AESData::set_other(const std::string& value) {
  _internal_set_other(value);
  // @@protoc_insertion_point(field_set:AESData.other)
}
inline std::string* AESData::mutable_other() {
  // @@protoc_insertion_point(field_mutable:AESData.other)
  return _internal_mutable_other();
}
inline const std::string& AESData::_internal_other() const {
  return other_.GetNoArena();
}
inline void AESData::_internal_set_other(const std::string& value) {
  
  other_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AESData::set_other(std::string&& value) {
  
  other_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AESData.other)
}
inline void AESData::set_other(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  other_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AESData.other)
}
inline void AESData::set_other(const char* value, size_t size) {
  
  other_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AESData.other)
}
inline std::string* AESData::_internal_mutable_other() {
  
  return other_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AESData::release_other() {
  // @@protoc_insertion_point(field_release:AESData.other)
  
  return other_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AESData::set_allocated_other(std::string* other) {
  if (other != nullptr) {
    
  } else {
    
  }
  other_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), other);
  // @@protoc_insertion_point(field_set_allocated:AESData.other)
}

// -------------------------------------------------------------------

// RsaData

// int32 userId = 1;
inline void RsaData::clear_userid() {
  userid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RsaData::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RsaData::userid() const {
  // @@protoc_insertion_point(field_get:RsaData.userId)
  return _internal_userid();
}
inline void RsaData::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  userid_ = value;
}
inline void RsaData::set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:RsaData.userId)
}

// bytes ecdhPubKey = 2;
inline void RsaData::clear_ecdhpubkey() {
  ecdhpubkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RsaData::ecdhpubkey() const {
  // @@protoc_insertion_point(field_get:RsaData.ecdhPubKey)
  return _internal_ecdhpubkey();
}
inline void RsaData::set_ecdhpubkey(const std::string& value) {
  _internal_set_ecdhpubkey(value);
  // @@protoc_insertion_point(field_set:RsaData.ecdhPubKey)
}
inline std::string* RsaData::mutable_ecdhpubkey() {
  // @@protoc_insertion_point(field_mutable:RsaData.ecdhPubKey)
  return _internal_mutable_ecdhpubkey();
}
inline const std::string& RsaData::_internal_ecdhpubkey() const {
  return ecdhpubkey_.GetNoArena();
}
inline void RsaData::_internal_set_ecdhpubkey(const std::string& value) {
  
  ecdhpubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RsaData::set_ecdhpubkey(std::string&& value) {
  
  ecdhpubkey_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RsaData.ecdhPubKey)
}
inline void RsaData::set_ecdhpubkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ecdhpubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RsaData.ecdhPubKey)
}
inline void RsaData::set_ecdhpubkey(const void* value, size_t size) {
  
  ecdhpubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RsaData.ecdhPubKey)
}
inline std::string* RsaData::_internal_mutable_ecdhpubkey() {
  
  return ecdhpubkey_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RsaData::release_ecdhpubkey() {
  // @@protoc_insertion_point(field_release:RsaData.ecdhPubKey)
  
  return ecdhpubkey_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RsaData::set_allocated_ecdhpubkey(std::string* ecdhpubkey) {
  if (ecdhpubkey != nullptr) {
    
  } else {
    
  }
  ecdhpubkey_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ecdhpubkey);
  // @@protoc_insertion_point(field_set_allocated:RsaData.ecdhPubKey)
}

// string aesKey = 3;
inline void RsaData::clear_aeskey() {
  aeskey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RsaData::aeskey() const {
  // @@protoc_insertion_point(field_get:RsaData.aesKey)
  return _internal_aeskey();
}
inline void RsaData::set_aeskey(const std::string& value) {
  _internal_set_aeskey(value);
  // @@protoc_insertion_point(field_set:RsaData.aesKey)
}
inline std::string* RsaData::mutable_aeskey() {
  // @@protoc_insertion_point(field_mutable:RsaData.aesKey)
  return _internal_mutable_aeskey();
}
inline const std::string& RsaData::_internal_aeskey() const {
  return aeskey_.GetNoArena();
}
inline void RsaData::_internal_set_aeskey(const std::string& value) {
  
  aeskey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RsaData::set_aeskey(std::string&& value) {
  
  aeskey_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RsaData.aesKey)
}
inline void RsaData::set_aeskey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  aeskey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RsaData.aesKey)
}
inline void RsaData::set_aeskey(const char* value, size_t size) {
  
  aeskey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RsaData.aesKey)
}
inline std::string* RsaData::_internal_mutable_aeskey() {
  
  return aeskey_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RsaData::release_aeskey() {
  // @@protoc_insertion_point(field_release:RsaData.aesKey)
  
  return aeskey_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RsaData::set_allocated_aeskey(std::string* aeskey) {
  if (aeskey != nullptr) {
    
  } else {
    
  }
  aeskey_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), aeskey);
  // @@protoc_insertion_point(field_set_allocated:RsaData.aesKey)
}

// -------------------------------------------------------------------

// LoginRsp

// int32 code = 1;
inline void LoginRsp::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginRsp::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginRsp::code() const {
  // @@protoc_insertion_point(field_get:LoginRsp.code)
  return _internal_code();
}
inline void LoginRsp::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void LoginRsp::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:LoginRsp.code)
}

// string codeMsg = 2;
inline void LoginRsp::clear_codemsg() {
  codemsg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginRsp::codemsg() const {
  // @@protoc_insertion_point(field_get:LoginRsp.codeMsg)
  return _internal_codemsg();
}
inline void LoginRsp::set_codemsg(const std::string& value) {
  _internal_set_codemsg(value);
  // @@protoc_insertion_point(field_set:LoginRsp.codeMsg)
}
inline std::string* LoginRsp::mutable_codemsg() {
  // @@protoc_insertion_point(field_mutable:LoginRsp.codeMsg)
  return _internal_mutable_codemsg();
}
inline const std::string& LoginRsp::_internal_codemsg() const {
  return codemsg_.GetNoArena();
}
inline void LoginRsp::_internal_set_codemsg(const std::string& value) {
  
  codemsg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LoginRsp::set_codemsg(std::string&& value) {
  
  codemsg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LoginRsp.codeMsg)
}
inline void LoginRsp::set_codemsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  codemsg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoginRsp.codeMsg)
}
inline void LoginRsp::set_codemsg(const char* value, size_t size) {
  
  codemsg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoginRsp.codeMsg)
}
inline std::string* LoginRsp::_internal_mutable_codemsg() {
  
  return codemsg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginRsp::release_codemsg() {
  // @@protoc_insertion_point(field_release:LoginRsp.codeMsg)
  
  return codemsg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRsp::set_allocated_codemsg(std::string* codemsg) {
  if (codemsg != nullptr) {
    
  } else {
    
  }
  codemsg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), codemsg);
  // @@protoc_insertion_point(field_set_allocated:LoginRsp.codeMsg)
}

// bytes ecdhServerPubKey = 3;
inline void LoginRsp::clear_ecdhserverpubkey() {
  ecdhserverpubkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginRsp::ecdhserverpubkey() const {
  // @@protoc_insertion_point(field_get:LoginRsp.ecdhServerPubKey)
  return _internal_ecdhserverpubkey();
}
inline void LoginRsp::set_ecdhserverpubkey(const std::string& value) {
  _internal_set_ecdhserverpubkey(value);
  // @@protoc_insertion_point(field_set:LoginRsp.ecdhServerPubKey)
}
inline std::string* LoginRsp::mutable_ecdhserverpubkey() {
  // @@protoc_insertion_point(field_mutable:LoginRsp.ecdhServerPubKey)
  return _internal_mutable_ecdhserverpubkey();
}
inline const std::string& LoginRsp::_internal_ecdhserverpubkey() const {
  return ecdhserverpubkey_.GetNoArena();
}
inline void LoginRsp::_internal_set_ecdhserverpubkey(const std::string& value) {
  
  ecdhserverpubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LoginRsp::set_ecdhserverpubkey(std::string&& value) {
  
  ecdhserverpubkey_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LoginRsp.ecdhServerPubKey)
}
inline void LoginRsp::set_ecdhserverpubkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ecdhserverpubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoginRsp.ecdhServerPubKey)
}
inline void LoginRsp::set_ecdhserverpubkey(const void* value, size_t size) {
  
  ecdhserverpubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoginRsp.ecdhServerPubKey)
}
inline std::string* LoginRsp::_internal_mutable_ecdhserverpubkey() {
  
  return ecdhserverpubkey_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginRsp::release_ecdhserverpubkey() {
  // @@protoc_insertion_point(field_release:LoginRsp.ecdhServerPubKey)
  
  return ecdhserverpubkey_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRsp::set_allocated_ecdhserverpubkey(std::string* ecdhserverpubkey) {
  if (ecdhserverpubkey != nullptr) {
    
  } else {
    
  }
  ecdhserverpubkey_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ecdhserverpubkey);
  // @@protoc_insertion_point(field_set_allocated:LoginRsp.ecdhServerPubKey)
}

// string sessionKey = 4;
inline void LoginRsp::clear_sessionkey() {
  sessionkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginRsp::sessionkey() const {
  // @@protoc_insertion_point(field_get:LoginRsp.sessionKey)
  return _internal_sessionkey();
}
inline void LoginRsp::set_sessionkey(const std::string& value) {
  _internal_set_sessionkey(value);
  // @@protoc_insertion_point(field_set:LoginRsp.sessionKey)
}
inline std::string* LoginRsp::mutable_sessionkey() {
  // @@protoc_insertion_point(field_mutable:LoginRsp.sessionKey)
  return _internal_mutable_sessionkey();
}
inline const std::string& LoginRsp::_internal_sessionkey() const {
  return sessionkey_.GetNoArena();
}
inline void LoginRsp::_internal_set_sessionkey(const std::string& value) {
  
  sessionkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LoginRsp::set_sessionkey(std::string&& value) {
  
  sessionkey_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LoginRsp.sessionKey)
}
inline void LoginRsp::set_sessionkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sessionkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoginRsp.sessionKey)
}
inline void LoginRsp::set_sessionkey(const char* value, size_t size) {
  
  sessionkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoginRsp.sessionKey)
}
inline std::string* LoginRsp::_internal_mutable_sessionkey() {
  
  return sessionkey_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginRsp::release_sessionkey() {
  // @@protoc_insertion_point(field_release:LoginRsp.sessionKey)
  
  return sessionkey_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRsp::set_allocated_sessionkey(std::string* sessionkey) {
  if (sessionkey != nullptr) {
    
  } else {
    
  }
  sessionkey_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sessionkey);
  // @@protoc_insertion_point(field_set_allocated:LoginRsp.sessionKey)
}

// string sessionID = 5;
inline void LoginRsp::clear_sessionid() {
  sessionid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginRsp::sessionid() const {
  // @@protoc_insertion_point(field_get:LoginRsp.sessionID)
  return _internal_sessionid();
}
inline void LoginRsp::set_sessionid(const std::string& value) {
  _internal_set_sessionid(value);
  // @@protoc_insertion_point(field_set:LoginRsp.sessionID)
}
inline std::string* LoginRsp::mutable_sessionid() {
  // @@protoc_insertion_point(field_mutable:LoginRsp.sessionID)
  return _internal_mutable_sessionid();
}
inline const std::string& LoginRsp::_internal_sessionid() const {
  return sessionid_.GetNoArena();
}
inline void LoginRsp::_internal_set_sessionid(const std::string& value) {
  
  sessionid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LoginRsp::set_sessionid(std::string&& value) {
  
  sessionid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LoginRsp.sessionID)
}
inline void LoginRsp::set_sessionid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sessionid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoginRsp.sessionID)
}
inline void LoginRsp::set_sessionid(const char* value, size_t size) {
  
  sessionid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoginRsp.sessionID)
}
inline std::string* LoginRsp::_internal_mutable_sessionid() {
  
  return sessionid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginRsp::release_sessionid() {
  // @@protoc_insertion_point(field_release:LoginRsp.sessionID)
  
  return sessionid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRsp::set_allocated_sessionid(std::string* sessionid) {
  if (sessionid != nullptr) {
    
  } else {
    
  }
  sessionid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sessionid);
  // @@protoc_insertion_point(field_set_allocated:LoginRsp.sessionID)
}

// int32 startSeq = 6;
inline void LoginRsp::clear_startseq() {
  startseq_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginRsp::_internal_startseq() const {
  return startseq_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginRsp::startseq() const {
  // @@protoc_insertion_point(field_get:LoginRsp.startSeq)
  return _internal_startseq();
}
inline void LoginRsp::_internal_set_startseq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  startseq_ = value;
}
inline void LoginRsp::set_startseq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_startseq(value);
  // @@protoc_insertion_point(field_set:LoginRsp.startSeq)
}

// int32 serverTime = 7;
inline void LoginRsp::clear_servertime() {
  servertime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginRsp::_internal_servertime() const {
  return servertime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginRsp::servertime() const {
  // @@protoc_insertion_point(field_get:LoginRsp.serverTime)
  return _internal_servertime();
}
inline void LoginRsp::_internal_set_servertime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  servertime_ = value;
}
inline void LoginRsp::set_servertime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_servertime(value);
  // @@protoc_insertion_point(field_set:LoginRsp.serverTime)
}

// string other = 8;
inline void LoginRsp::clear_other() {
  other_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginRsp::other() const {
  // @@protoc_insertion_point(field_get:LoginRsp.other)
  return _internal_other();
}
inline void LoginRsp::set_other(const std::string& value) {
  _internal_set_other(value);
  // @@protoc_insertion_point(field_set:LoginRsp.other)
}
inline std::string* LoginRsp::mutable_other() {
  // @@protoc_insertion_point(field_mutable:LoginRsp.other)
  return _internal_mutable_other();
}
inline const std::string& LoginRsp::_internal_other() const {
  return other_.GetNoArena();
}
inline void LoginRsp::_internal_set_other(const std::string& value) {
  
  other_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LoginRsp::set_other(std::string&& value) {
  
  other_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LoginRsp.other)
}
inline void LoginRsp::set_other(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  other_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoginRsp.other)
}
inline void LoginRsp::set_other(const char* value, size_t size) {
  
  other_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoginRsp.other)
}
inline std::string* LoginRsp::_internal_mutable_other() {
  
  return other_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginRsp::release_other() {
  // @@protoc_insertion_point(field_release:LoginRsp.other)
  
  return other_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRsp::set_allocated_other(std::string* other) {
  if (other != nullptr) {
    
  } else {
    
  }
  other_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), other);
  // @@protoc_insertion_point(field_set_allocated:LoginRsp.other)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_LoginAuthMessage_2eproto
